import casa.*
import  cosas.*

/*#################################
       AUN NO ESTA TERMINADO!!!
* ################################# */
describe "test de casa de Julian"{
    test "Hacer que se compre una heladera, una cama y una placha"{
    casaDePepeYJulian.comprar(heladera)
    casaDePepeYJulian.comprar(cama)
    casaDePepeYJulian.comprar(plancha)
    assert.equals(3,casaDePepeYJulian.cantidadDeCosasCompradas())

    assert.that(casaDePepeYJulian.tieneAlgun(electrodomestico))
    assert.notThat(casaDePepeYJulian.tieneAlgun(comida))

    assert.that(casaDePepeYJulian.vieneDeComprar(electrodomestico))
    assert.notThat(casaDePepeYJulian.vieneDeComprar(mueble))

    assert.that(casaDePepeYJulian.esDerrochona())
    
    assert.equals([heladera,plancha],casaDePepeYJulian.comprados(electrodomestico))
    assert.equals([cama],casaDePepeYJulian.comprados(mueble))
    
    assert.notThat(casaDePepeYJulian.tieneAlgun(comida))

    assert.equals([tiraDeAsado,paqueteDeFideos],
                    casaDePepeYJulian.queFaltaComprar([tiraDeAsado,paqueteDeFideos,plancha]))

    assert.that(casaDePepeYJulian.faltaComida())


    assert.equals(#{electrodomestico,mueble}, casaDePepeYJulian.categoriasCompradas())

    
    }
    test "cuenta corriente"{
              //para la casaDePepeYJulian su cuenta inicia en 0, pero utilizamos un setter no accesible 
              //para la casa para testear
              
        cuentaCorriente.saldo(20)
        
        casaDePepeYJulian.depositar_enCuenta(1000,cuentaCorriente)
        assert.equals(1020, cuentaCorriente.saldo())

        casaDePepeYJulian.extraer_deCuenta(50, cuentaCorriente)
        assert.equals(970,cuentaCorriente.saldo())

        assert.throwsException({ casaDePepeYJulian.extraer_deCuenta(2000, cuentaCorriente)} )

        
    }
}